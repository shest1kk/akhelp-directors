import React, { useState, useEffect } from "react";
import './StartPage.css';
import { useTelegram } from "../../../hooks/useTelegram";
import Button from "../../Buttons/Button";

const StartPage = () => {
    const { user } = useTelegram();
    const [showModal, setShowModal] = useState(true);
    const [showButtons, setShowButtons] = useState(false);
    const [selectedTool, setSelectedTool] = useState(null);
    const [currentStep, setCurrentStep] = useState(0);
    const [selectedSubOption, setSelectedSubOption] = useState(null);

    const closeModal = () => {
        setShowModal(false);
        setTimeout(() => setShowButtons(true), 300);
    };

    const handleOutsideClick = (e) => {
        if (e.target.className === 'modal') {
            closeModal();
        }
    };

    const buttons = [
        { name: "–ü–µ—Ä–µ–µ–∑–¥", texts: [
            { title: "–°–ø—Ä–æ—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", content: '–í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥?\n–ï—Å—Ç—å –ª–∏ —Ç–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã KFC?\n–•–æ—Ç–µ–ª –±—ã —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ KFC?' },
            { title: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?", content: '–ü—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω ROSTICS –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–Ω—à–∏–∑—ã.\n–ü—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º HRM (–¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞)'},
            { title: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", content: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã/—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥.\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ.\n–ó–Ω–∞–∫–æ–º–∞—è —Ä–∞–±–æ—Ç–∞ (–Ω–µ –±—É–¥–µ—Ç —Å—Ç—Ä–µ—Å—Å–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å "0")' },
            { title: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", content: "–°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—ã—Ç–∏—è.\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫ –±—Ä–µ–Ω–¥—É." }
        ], buttonTexts: ["–ß—Ç–æ –¥–µ–ª–∞—Ç—å?", "–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?", "–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω?", "–ó–∞–∫—Ä—ã—Ç—å"] },

        {name: "–ù–∞—à–µ–ª –¥—Ä—É–≥—É—é —Ä–∞–±–æ—Ç—É", texts : [
            {title: "–°–ø—Ä–æ—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", content: "–ö–∞–∫–∞—è —Ä–∞–±–æ—Ç–∞?\n–ö–∞–∫—É—é –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç?\n–ß–µ–º —ç—Ç–∞ —Ä–∞–±–æ—Ç–∞ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ç–µ–±—è?\n\n–í–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã!"},
            {title: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?", content: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å—Ö–æ–¥—è –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø–∞–Ω–∏–∏/–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—É–π—Ç–∏ –≤ –æ—Ñ–∏—Å)"},
            {title: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", content: "–ó–Ω–∞–∫–æ–º–∞—è –∫–æ–º–ø–∞–Ω–∏—è/–∑–Ω–∞–∫–æ–º—ã–µ —É—Å–ª–æ–≤–∏—è, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è.\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–∂–∞ —Ä–∞–±–æ—Ç–∞, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç: –±–ª, –¥–µ–∫—Ä–µ—Ç–Ω—ã–µ, –æ—Ç–ø—É—Å–∫–Ω—ã–µ, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ (–ú–°).\n–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ª—å–≥–æ—Ç—ã"},
            {title: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", content: "–°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—ã—Ç–∏—è.\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã.\n–í–ö–†"}
        ], buttonTexts: ["–ß—Ç–æ –¥–µ–ª–∞—Ç—å?", "–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?", "–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω?", "–ó–∞–∫—Ä—ã—Ç—å"],},
    
        
    ]

    const handleButtonClick = (index) => {
        setSelectedTool(buttons[index]);
        setCurrentStep(0);
        setSelectedSubOption(null);
        setShowButtons(false);
    };

    const handleNextStep = () => {
        if (currentStep < selectedTool.texts.length - 1) {
            setCurrentStep(currentStep + 1);
            setSelectedSubOption(null);
        } else {
            setSelectedTool(null);
            setShowButtons(true);
        }
    };

    const handlePreviousStep = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
            setSelectedSubOption(null);
        } else {
            setSelectedTool(null);
            setShowButtons(true);
        }
    };

    const handleSubOptionClick = (subOption) => {
        setSelectedSubOption(subOption);
    };

    const formatContent = (content) => {
        return content.split('\n').map((line, index) => (
            <React.Fragment key={index}>
                {line}
                <br />
            </React.Fragment>
        ));
    };

    return (
        <div className="StartPage_wrapper">
            {showModal && (
                <div className="modal" onClick={handleOutsideClick}>
                    <div className="modal-content">
                        <h2>–ü—Ä–∏–≤–µ—Ç, {user?.first_name}üëãüèª</h2>
                        <p>–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –∑–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ–µ–π –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã!</p>
                        <button onClick={closeModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            )}
            {showButtons && (
                <div className="buttons-section">
                    <h3 className="buttons-title">–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —Ç–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ö–æ—á–µ—Ç —É–≤–æ–ª–∏—Ç—å—Å—è?</h3>
                    <div className="buttons-container">
                        {buttons.map((button, index) => (
                            <Button 
                                key={index} 
                                className="tool-button"
                                onClick={() => handleButtonClick(index)}
                            >
                                {button.name}
                            </Button>
                        ))}
                    </div>
                </div>
            )}
            {selectedTool && (
                <div className="modal">
                    <div className="modal-content">
                        <h3>{selectedTool.texts[currentStep].title}</h3>
                        {selectedTool.texts[currentStep].subOptions ? (
                            <>
                                <p>{selectedTool.texts[currentStep].content}</p>
                                <div className="sub-options">
                                    {selectedTool.texts[currentStep].subOptions.map((subOption, index) => (
                                        <Button
                                            key={index}
                                            className="sub-option-button"
                                            onClick={() => handleSubOptionClick(subOption)}
                                        >
                                            {subOption.name}
                                        </Button>
                                    ))}
                                </div>
                                {selectedSubOption && (
                                    <p>{formatContent(selectedSubOption.content)}</p>
                                )}
                            </>
                        ) : (
                            <p>{formatContent(selectedTool.texts[currentStep].content)}</p>
                        )}
                        <div className="button-container">
                            {currentStep > 0 && (
                                <button onClick={handlePreviousStep}>–ù–∞–∑–∞–¥</button>
                            )}
                            {currentStep < selectedTool.texts.length - 1 ? (
                                <button onClick={handleNextStep}>
                                    {selectedTool.buttonTexts[currentStep]}
                                </button>
                            ) : (
                                <button onClick={() => {
                                    setSelectedTool(null);
                                    setShowButtons(true);
                                }}>–ó–∞–∫—Ä—ã—Ç—å</button>
                            )}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default StartPage;